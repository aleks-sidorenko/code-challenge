object Solution {
  import scala.collection._
  

  def input(): List[String] = {
    "3175" ::
    "373" :: 
    "11373" :: 
    "1137311373" :: 
    "1350297079989171477791892123929141605573631151125933376097791877830238462471373933362476484818693477173990672289892448124097556197582379957168911392680312103962394732707409889862447273901522659" :: 
    //"13502970799891714777918921239291416055736311511259333760977918778302384624713739333624764848186934771739906722898924481240975561975823799571689113926803121039623947327074098898624472739015226594947377475876393714495918412319821331216374413468641700339851419219059346543138569733399193423749423662617904441446609736093816131102761140527747853800281289603592861469993864091377291645149429797124769164701527533631991972313575298359798305797305672485694457995299619980092064773767699711533778731759937126937596918212094702979920213826938930991047439606676074176903136202759809322271587381141403572581827501130043921199299993448309276337164117416811685411043231571633614215152378422159906976367817279143213825898706435725129425161078188696794332147657347849384017990259333331670447507776691814583574111677080176058796172731091399782991167142280362284974316118265753774963535969029177323257919762130898996337660619231611324294060973454995158350893955793461917598093604063407153825697658591196543487789403435728812926271383234214232801874285394881714874772427134200738482518635318447774689926746950611315340997416746884168337770308167489503159263935370918409791053676293811894711954956611811016306783895182620113862952770129173523907634483280223348851104537553153293311464351334799324193900017742233944813765299549112036595870172986317041305533292517750679760927174431405436198118874411385696486172937917098432046671690330327127223149480343970913443758642955450376483740713786958755062192929380100791385392714963016359749718463197267963605953642320298725327361155726380395499166983960246128834924799199244180392773181306347382457701377211061261389780553164478269074738331109213304134167971997992362879189895233078372932033217471791151580859395201163015461094065137351736259437883576021378284491592331261181547585061433981782311947892234816457034566831956972015172892499078316872941335375079630127536377196618318634302675116968629314863926667173693772462786677780803242731993557294953353081103483182537920827915703494381544987188345370775538734454347364792496756509152077948721181123613363604276735674741692793533205338357897527716578274162437568811252699523636673994997992452312449385909367349386279253109740483625943974419439567111659127157906751944297233879691903411895025973331877869015970735461511575599157578272762528371963386418349742325714617347977283519687917247547616501826572094715928535998318892479011691641780404385798165423381191931424343098191151477378551872120999947517610518638971986411356716483794420272589675281973771733464217219979492112106189491730153155158126795919903794547932177928457317189506047177841807241672593589609348097276767124297653899301073751183562909880722419790277759526793247163423712487978799451103382037220369823651688451321199278175062639000379931766421182031476743172009319981993472712534089114760594510699504612018212021295609980260394111788396958155184946119573736907181718249398933833413573233692972339553071920476175374379539745399514916396977073837953763581349857745185917593964817387557961192127275961386149988357839470413134909139739630451933792974984477743917150005714757186510355525323375984431743923387721336829362443106911542431615633478911180577482739527098203195448791146413135675323138757791211955609274793010996903780611188376362251395464154320334487551718221315125915741389923565183442243941221159857991723282869279679741079786703762973842551127549452537319097605897577532016673313016549317781214462314869291110532248973188335417711999613769110019395394181175394064955284725068191432712475316133332381925647128313357608920261225371716629808363345601117643431021185651834607518719170836127519244315529715288948007166040931013533593924043532621943913316177184073911749632231501593602039558179780191809909127207781601483163687031733277734233812249381569401807831369877877436547687179948469181303662939149899347071255523951331804383367711192667598841484067483323352794211038686633112996681792694611902714432436499755637357347952951966997129399945544354253993383999287314213469993525893687714051994811416101322783339613839911353237225821507417537438796678600515935985991972787774004163572919759409289987869876653204133759463178691160367889699320899281033798823791849814423531823401707122501260893156887429901258319277231803977674347647557686317464953382873339761423307155809700171270547157061759147414381778780167217661727169964609802103926183222337880513982087216023389579262035145718412733143396132191505714249617318319836593913795846034206119468791558955699935180367453328948978982920321350134311297987820134411126270915626922375712758370795355952989305125816123923792080724346137652951241624983" ::
    Nil
  }

  def solve(str: String): Int = {

    def generatePrimes(max: Int = 1000000): Set[Int] = {
      
      val (_, primes) = (2 to max).foldLeft(new mutable.HashSet[Int]() -> new mutable.HashSet[Int]()) { case ((nonPrimes, primes), i) => 
        if (!nonPrimes.contains(i)) {
          primes += i
          (2 to ((max / i) + 1)).foreach { j => nonPrimes += j * i }
        }        
        nonPrimes -> primes
      }

      primes

    }

    val primes = generatePrimes().map(_.toString)
    
    val cache = new mutable.HashMap[Int, Long]()

    def count(from: Int): Long = {
        cache.getOrElseUpdate(from, { 
          val s = str.substring(from)
          if (s.isEmpty) 0
          else if (s.head == '0' || s.last == '0') 0
          else {
            val init = if (primes.contains(s)) 1l else 0l
            (1 until math.min(s.length, 7)).foldLeft(init) { (acc, i) =>
              val first = s.substring(0, i)
              if (primes.contains(first)) {
                acc + count(from + i)
              } else {
                acc
              }
            }
          }
      })
      
    }
     
     
     
    (count(0) % 1000000007l).toInt

  }

  
  def main(args: Array[String]) = {
    val cases = input() 
    cases.foreach { c =>
      println(s"${solve(c)}")
    }
  }
}
